from fastapi import FastAPI, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel
from typing import List
import requests
import random
import string

app = FastAPI()

# CORS setup
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Spotify API Credentials
SPOTIFY_CLIENT_ID = "c632942896d44382a0e0d7e54a5b3ca9"
SPOTIFY_CLIENT_SECRET = "7eb2d6b0f4ea4e90bf5e059a50073e49"
REDIRECT_URI = "http://localhost:3000/callback"

# Global variable to store the access token
access_token = None

class PlaylistRequest(BaseModel):
    playlist_name: str
    track_uris: List[str]

@app.get("/")
def root():
    return {"message": "Welcome to the Spotify Playlist Recommender!"}

@app.get("/login")
def login():
    scope = "playlist-read-private playlist-modify-private playlist-modify-public user-read-recently-played"
    auth_url = (
        f"https://accounts.spotify.com/authorize?client_id={SPOTIFY_CLIENT_ID}"
        f"&response_type=code&redirect_uri={REDIRECT_URI}&scope={scope}"
    )
    return {"url": auth_url}

@app.get("/callback")
def callback(code: str):
    global access_token

    # Exchange code for an access token
    token_url = "https://accounts.spotify.com/api/token"
    payload = {
        "grant_type": "authorization_code",
        "code": code,
        "redirect_uri": REDIRECT_URI,
        "client_id": SPOTIFY_CLIENT_ID,
        "client_secret": SPOTIFY_CLIENT_SECRET,
    }

    response = requests.post(token_url, data=payload)
    if response.status_code != 200:
        return {"error": response.json()}

    token_data = response.json()
    access_token = token_data["access_token"]
    return {"message": "Login successful!"}

@app.get("/recommendations")
def get_recommendations(activity: str = "walking", include_bollywood: bool = True):
    global access_token
    if not access_token:
        raise HTTPException(status_code=401, detail="User is not authenticated with Spotify. Please log in.")

    headers = {"Authorization": f"Bearer {access_token}"}

    # Map activities to base search queries
    general_queries = {
        "walking": "chill beats",
        "running": "workout music",
        "sitting": "relaxing piano",
    }
    bollywood_queries = {
        "walking": "Bollywood chill",
        "running": "Bollywood workout",
        "sitting": "Bollywood relaxing",
    }

    # Choose query based on flag
    search_queries = bollywood_queries if include_bollywood else general_queries
    base_query = search_queries.get(activity.lower(), "popular music")

    # Add randomness to query
    random_char = random.choice(string.ascii_letters)
    search_query = f"{base_query} {random_char}"

    search_url = f"https://api.spotify.com/v1/search?q={search_query}&type=track&limit=30"
    response = requests.get(search_url, headers=headers)

    if response.status_code != 200:
        raise HTTPException(status_code=response.status_code, detail="Failed to fetch recommendations from Spotify")

    tracks = response.json().get("tracks", {}).get("items", [])
    recommendations = [
        {
            "name": track["name"],
            "artist": track["artists"][0]["name"],
            "url": track["external_urls"]["spotify"],
            "uri": track["uri"],
            "duration_ms": track["duration_ms"],
            "popularity": track["popularity"],
            "album_art": track["album"]["images"][0]["url"] if track["album"]["images"] else None,
        }
        for track in tracks
    ]
    return {"activity": activity, "recommendations": recommendations, "bollywood": include_bollywood}

@app.post("/create_playlist")
def create_playlist(request: PlaylistRequest):
    global access_token
    if not access_token:
        raise HTTPException(status_code=401, detail="User is not authenticated with Spotify. Please log in.")

    headers = {"Authorization": f"Bearer {access_token}"}

    # Get the user's Spotify ID
    user_response = requests.get("https://api.spotify.com/v1/me", headers=headers)
    if user_response.status_code != 200:
        raise HTTPException(status_code=user_response.status_code, detail="Failed to fetch user information")

    user_id = user_response.json().get("id")

    # Create a new playlist
    playlist_response = requests.post(
        f"https://api.spotify.com/v1/users/{user_id}/playlists",
        json={"name": request.playlist_name, "description": "Generated by Spotify Recommender", "public": False},
        headers=headers,
    )
    if playlist_response.status_code != 201:
        raise HTTPException(status_code=playlist_response.status_code, detail="Failed to create playlist")

    playlist_id = playlist_response.json().get("id")

    # Add tracks to the playlist
    add_tracks_response = requests.post(
        f"https://api.spotify.com/v1/playlists/{playlist_id}/tracks",
        json={"uris": request.track_uris},
        headers=headers,
    )
    if add_tracks_response.status_code != 201:
        raise HTTPException(
            status_code=add_tracks_response.status_code, detail="Failed to add tracks to playlist"
        )

    playlist_url = playlist_response.json().get("external_urls", {}).get("spotify")
    return {"message": "Playlist created successfully", "url": playlist_url}
